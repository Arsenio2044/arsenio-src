//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Example pixel shader that can be applied to models
//
//==================================================================================================

// DYNAMIC: "RENDER_SKY"			"0..1"
// STATIC: "CONVERT_TO_SRGB"			"0..0"

#include "common_flashlight_fxc.h"
#include "shader_constant_register_map.h"

#define PI 3.1415926
#define iSteps 14
#define jSteps 7

const float4 g_DiffuseModulation			: register( PSREG_DIFFUSE_MODULATION );
const float4 g_ShadowTweaks					: register( PSREG_ENVMAP_TINT__SHADOW_TWEAKS );
const float4 g_FogParams					: register( PSREG_FOG_PARAMS );
const float4 g_FlashlightAttenuationFactors	: register( PSREG_FLASHLIGHT_ATTENUATION );			// On non-flashlight pass
const float4 g_FlashlightPos_RimBoost		: register( PSREG_FLASHLIGHT_POSITION_RIM_BOOST );
const float4x4 g_FlashlightWorldToTexture	: register( PSREG_FLASHLIGHT_TO_WORLD_TEXTURE );

#define g_FlashlightPos					g_FlashlightPos_RimBoost.xyz

uniform sampler2D LUTSample		        : register( s0 );	// Base map, selfillum in alpha

float g_Thickness				: register( c4 );
float g_Coverage				: register( c5 );
float4 g_SunPos				    : register( c6 );
float4 g_WindSpeed				: register( c7 );
float g_Time				    : register( c8 );

/**** TWEAK *****************************************************************/
#define COVERAGE		g_Coverage
#define THICKNESS		g_Thickness
#define ABSORPTION		2.030725
#define WIND			float3(g_WindSpeed.x * g_Time, g_WindSpeed.y * g_Time, g_WindSpeed.z * g_Time)

#define FBM_FREQ		2.76434
#define SUN_DIR			normalize(g_SunPos.xyz)

#define STEPS			int(g_WindSpeed.a)
/******************************************************************************/

// ----------------------------------------------------------------------------
// Noise function by iq from https://www.shadertoy.com/view/4sfGzS
// ----------------------------------------------------------------------------

float hash(
	float n
){
	return frac(sin(n)*753.5453123);
}

float noise_iq(
	float3 x
){
	float3 p = floor(x);
	float3 f = frac(x);
	f = f*f*(3.0 - 2.0*f);

    float n = p.x + p.y*157.0 + 113.0*p.z;
    return lerp(lerp(lerp( hash(n+  0.0), hash(n+  1.0),f.x),
                   lerp( hash(n+157.0), hash(n+158.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

#define noise(x) noise_iq(x)

// ----------------------------------------------------------------------------
// fracal Brownian Motion
// ----------------------------------------------------------------------------
float fbm(
	float3 pos,
	float lacunarity
){
	float3 p = pos;
	float
	t  = 0.51749673 * noise(p); p *= lacunarity;
	t += 0.25584929 * noise(p); p *= lacunarity;
	t += 0.12527603 * noise(p); p *= lacunarity;
	t += 0.06255931 * noise(p);
	
	return t;
}

float get_noise(float3 x)
{
	return fbm(x, FBM_FREQ);
}

float density(float3 pos, float3 offset, float t){
	// signal
	float3 p = pos * .0212242 + offset;
	float dens = get_noise(p);
	
	float cov = 1. - COVERAGE;
	//dens = band (.1, .3, .6, dens);
	//dens *= step(cov, dens);
	//dens -= cov;
	dens *= smoothstep (cov, cov + .05, dens);

	return clamp(dens, 0., 1.);	
}

float3 LookUpTable(float x)
{
	return tex2Dlod(LUTSample, float4(1.0 - x, 0.05, 0.0, 0.0)).rgb;
}

float3 light(float3 origin){
	const int steps = 1;
	float march_step = 1.;

	float3 pos = origin;
	float3 dir_step = SUN_DIR * march_step;
	float T = 1.; // transmitance

	for (int i = 0; i < steps; i++) {
		float dens = density(pos, WIND, 0.);

		float T_i = exp(-ABSORPTION * dens * march_step);
		T *= T_i;
		//if (T < .01) break;

		pos += dir_step;
	}

	return LookUpTable(clamp(T + clamp(SUN_DIR.y, -1.0, 1.0), -1.0, 1.0));
}

float4 render_clouds(
	float3 origin,
	float3 direction,
    float3 spherePos
){

	const float thickness = THICKNESS; // length(hit_2.origin - hit.origin);
	//const float r = 1. - ((atmosphere_2.radius - atmosphere.radius) / thickness);
	const int steps = STEPS; // +int(32. * r);
	float march_step = thickness / float(steps);

	float3 dir_step = direction / direction.y * march_step;
	float3 pos = spherePos;

	float T = 1.; // transmitance
	float3 C = float3(0, 0, 0); // color
	float alpha = 0.;

	if(direction.y < 0.0)
	{
		return float4(C, 0.0);
	}

	for (int i = 0; i < steps; i++) {
		float h = float(i) / float(steps);
		float dens = density (pos, WIND, h);

		float T_i = exp(-ABSORPTION * dens * march_step);
		T *= T_i;
		if (T < .01) break;

		C += T * 
            light(pos) * dens * march_step;
		alpha += (1. - T_i) * (1. - alpha);

		pos += dir_step;
		if (length(pos) > 1e3) break;
	}

	return float4(C, alpha);
}

float2 rsi(float3 r0, float3 rd, float sr) {
    // ray-sphere intersection that assumes
    // the sphere is centered at the origin.
    // No intersection when result.x > result.y
    float a = dot(rd, rd);
    float b = 2.0 * dot(rd, r0);
    float c = dot(r0, r0) - (sr * sr);
    float d = (b*b) - 4.0*a*c;
    if (d < 0.0) return float2(1e5,-1e5);
    return float2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}

float3 atmosphere(float3 r, float3 r0, float3 pSun, float iSun, float rPlanet, float rAtmos, float3 kRlh, float kMie, float shRlh, float shMie, float g) {
    // Normalize the sun and view directions.
    pSun = normalize(pSun);
    r = normalize(r);

    // Calculate the step size of the primary ray.
    float2 p = rsi(r0, r, rAtmos);
    if (p.x > p.y) return float3(0,0,0);
    p.y = min(p.y, rsi(r0, r, rPlanet).x);
    float iStepSize = (p.y - p.x) / float(iSteps);

    // Initialize the primary ray time.
    float iTime = 0.0;

    // Initialize accumulators for Rayleigh and Mie scattering.
    float3 totalRlh = float3(0,0,0);
    float3 totalMie = float3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float mu = dot(r, pSun);
    float mumu = mu * mu;
    float gg = g * g;
    float pRlh = 3.0 / (16.0 * PI) * (1.0 + mumu);
    float pMie = 3.0 / (8.0 * PI) * ((1.0 - gg) * (mumu + 1.0)) / (pow(1.0 + gg - 2.0 * mu * g, 1.5) * (2.0 + gg));

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        float3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos) - rPlanet;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = rsi(iPos, pSun, rAtmos).y / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            float3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos) - rPlanet;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        float3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        totalRlh += odStepRlh * attn;
        totalMie += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;

    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * totalRlh + pMie * kMie * totalMie);
}

struct PS_INPUT
{
	float2 baseTexCoord	: TEXCOORD0;
	float4 lightAtten	: TEXCOORD1;
	float3 worldNormal	: TEXCOORD2;
	float3 worldPos		: TEXCOORD3;
	float3 projPos		: TEXCOORD4;
	float3 modelPos		: TEXCOORD5;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
	float4 vColor_1				:	COLOR1;
	float4 vColor_2				:	COLOR2;
	float4 vColor_3				:	COLOR3;
};

PS_OUTPUT main( PS_INPUT i )
{	
	PS_OUTPUT o;
#if RENDER_SKY == 1
	float3 sky = atmosphere(
        normalize(float3(i.modelPos.x,i.modelPos.z,i.modelPos.y)),           // normalized ray direction
        float3(0,6372e3,0),               // ray origin
        SUN_DIR,                        // position of the sun
        g_SunPos.a,                           // intensity of the sun
        6371e3,                         // radius of the planet in meters
        6471e3,                         // radius of the atmosphere in meters
        float3(5.5e-6, 13.0e-6, 22.4e-6), // Rayleigh scattering coefficient
        21e-6,                          // Mie scattering coefficient
        8e3,                            // Rayleigh scale height
        1.2e3,                          // Mie scale height
        0.758                           // Mie preferred scattering direction
    );

    float4 clouds = render_clouds(float3(0.0, 0.0, 0.0), normalize(float3(i.modelPos.x,i.modelPos.z,i.modelPos.y)), float3(i.modelPos.x,i.modelPos.z,i.modelPos.y));

    float3 col = lerp(sky, clouds.rgb/(0.000001+clouds.a), clouds.a);
    o.vColor_0 = float4(col.rgb, 1.0);
#else
    o.vColor_0 = float4(0.0f.xxx, 1.0);
#endif

	
	o.vColor_1 = float4(normalize(float3(i.modelPos.x,i.modelPos.y,i.modelPos.z)) * -1.0f, 1.0);
	o.vColor_2 = float4(0.0f.xxx, 0.0);
    o.vColor_3 = float4(20.0f.xxx, 0.0);
	return o;
}
